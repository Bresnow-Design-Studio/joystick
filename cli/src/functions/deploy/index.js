import fs from 'fs';
import os from 'os';
import inquirer from 'inquirer';
import CLILog from '../../lib/CLILog.js';
import writeDeploymentTokenToDisk from './writeDeploymentTokenToDisk.js';
import isValidJSONString from '../../lib/isValidJSONString.js';
import prompts from './prompts.js';
import getDeployment from './getDeployment.js';
import getMachineFingerprint from './getMachineFingerprint.js';
import getDeploymentCosts from './getDeploymentCosts.js';

export default async (args = {}, options = {}) => {
  const hasJoystickFolder = fs.existsSync('.joystick');
  
  if (!hasJoystickFolder) {
    CLILog('This is not a Joystick project. A .joystick folder could not be found.', {
      level: 'danger',
      docs: 'https://github.com/cheatcode/joystick',
    });
    
    process.exit(0);
  }
  
  const hasDeploymentTokenFile = fs.existsSync('.deploy/token.json');
  let promptToken;
  
  if (!hasDeploymentTokenFile && !options.token) {
    promptToken = await inquirer.prompt(prompts.token()).then((answers) => answers?.token);
  }

  if (options.token || promptToken) {
    writeDeploymentTokenToDisk(options.token || promptToken);
  }

  const deploymentTokenFile = hasDeploymentTokenFile ? isValidJSONString(fs.readFileSync('.deploy/token.json')) : null;
  const deploymentToken = deploymentTokenFile?.deploymentToken || options.token || promptToken;

  if (!deploymentToken) {
    CLILog(`Deployment token not found. This is likely a bug with the CLI and not your fault. Please review the documentation at the URL below and contact business@cheatcode.co if the problem persists.`, {
      level: 'danger',
      docs: 'https://cheatcode.co/docs/deploy/deployment-tokens',
    });
    process.exit(0);
  }

  let domain = options?.domain;

  if (!options?.domain) {
    domain = await inquirer.prompt(prompts.domain()).then((answers) => answers?.domain);
  }

  const fingerprint = await getMachineFingerprint();
  const deploymentFromServer = await getDeployment(domain, deploymentToken, fingerprint);

  if (deploymentFromServer?.deployment?.status === 'undeployed') {
    // TODO: Build app.
    // TODO: Upload built app as a zip to user's provider of choice.
    // TODO: Trigger server provisioning.
    // TODO: Prompt user to run SSL provisioning against load balancers.
    const deploymentToExecute = await inquirer.prompt(prompts.initialDeployment(deploymentFromServer?.user, deploymentToken, fingerprint));
    const monthlyTotal = await getDeploymentCosts(deploymentToExecute);

    console.log(monthlyTotal);

    const confirmInitialDeployment = await inquirer.prompt(
      prompts.confirmInitialDeployment(deploymentToExecute, monthlyTotal?.costs)
    );

    console.log({
      confirmInitialDeployment,
    });
  }
};


// import loginToCheatCode from './lib/loginToCheatCode.js';
// import prompts from './lib/prompts.js';
// import getDeployment from './lib/getDeployment.js';

// // TODO: If no existing token file or user login, prompt and ask: "How do you want to login? [Token, Email/Password]"
// // When someone uses a token, record their mac address. If they reach a limit of machines, they can upgrade.
// // 
// // Deployment tokens will be generated by the subscription owner on their account. They can generate up to the alotted number and label each one. Also give an option to email the token to a developer.
// // Deploy Startup ($29/mo) = Up to 5 Users // Deploy Small Business ($39/mo) = Up to 10 // Deploy Enterprise ($199/mo) = Unlimited Users  // Deploy Forever?

// const login = await inquirer.prompt(prompts.login()).then((answers) => answers);
// const account = await loginToCheatCode(login?.emailAddress, login?.password);

// if (!account) {
//   console.log('\n');
//   process.exit(0);
// }

// const domain = await inquirer.prompt(prompts.domain()).then((answers) => answers?.domain);
// const deployment = await getDeployment(domain, account?.cookies);

// if (deployment?.status === 'undeployed') {
//   const deploymentToExecute = await inquirer.prompt(prompts.initialDeployment(account?.user));
//   console.log(deploymentToExecute);

//   // NOTE: Initial deployment involves: creating servers, uploading/unpacking code, installing dependencies, and setting up the config scripts.
//   // After install, prompt user to run joystick deployment <domain> ssl or visit the dashboard to generate
//   // their SSL certs (this talks to the load balancers, runs certbot, and then shares the cert between each load balancer)

//   // TODO: Initial provisioning takes ~2 minutes for most deployments. After that's complete,
//   // you will be prompted to update your DNS records and provision your SSL certificate.

//   // TODO: When the provisioning step is finished, have a big warning that says
//   /*
//     In order to complete deployment, please add the following DNS records to your domain and the run joystick deployment cheatcode.co ssl
//     to provision your SSL certificates.

//     Type  Domain Name   IP Address    TTL
//     -------------------------------------------------------------------------
//     A     cheatcode.co  192.168.1.1   Lowest Possible Value
//     A     cheatcode.co  192.168.1.2   Lowest Possible Value

//   */
// }